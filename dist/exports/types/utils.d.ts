export declare type Possible<T> = T | undefined;
export declare function defined<T>(t: Possible<T>, errorMessage?: string): T;
export declare function isDefined<T>(t: Possible<T>): boolean;
declare type MaybeNullOrUndefined<T> = T | null | undefined;
export declare function notNullOrUndefined<T>(t: MaybeNullOrUndefined<T>, errorMessage?: string): T;
export declare type Awaited<T> = T extends Promise<infer U> ? U : T;
export declare function tuple<T0, T1, T2, T3, T4, T5, T6, T7>(arr: [T0, T1, T2, T3, T4, T5, T6, T7]): [T0, T1, T2, T3, T4, T5, T6, T7];
export declare function tuple<T0, T1, T2, T3, T4, T5, T6>(arr: [T0, T1, T2, T3, T4, T5, T6]): [T0, T1, T2, T3, T4, T5, T6];
export declare function tuple<T0, T1, T2, T3, T4, T5>(arr: [T0, T1, T2, T3, T4, T5]): [T0, T1, T2, T3, T4, T5];
export declare function tuple<T0, T1, T2, T3, T4>(arr: [T0, T1, T2, T3, T4]): [T0, T1, T2, T3, T4];
export declare function tuple<T0, T1, T2, T3>(arr: [T0, T1, T2, T3]): [T0, T1, T2, T3];
export declare function tuple<T0, T1, T2>(arr: [T0, T1, T2]): [T0, T1, T2];
export declare function tuple<T0, T1>(arr: [T0, T1]): [T0, T1];
export declare function tuple<T0>(arr: [T0]): [T0];
export {};
